.model small
.stack 100h
.data

inmsg db "Enter a number: $"
outmsg db "The result is $"

.code 
mov ax, @data
mov ds, ax

lea dx, inmsg       ; display input message
mov ah, 09h
int 21h

mov ah, 01h         ; take one digit input
int 21h
sub al, '0'         ; ascii to value
mov cl, al          ; store it in cl

mov dl, 0ah         ; print newline
mov ah, 02h
int 21h

lea dx, outmsg      ; display output message
mov ah, 09h
int 21h

mov dl, cl
cmp dl, 1            ; if number <= 1 print it as it is
jle show             ; else compute fibo(number)

dec cl
mov al, 0
mov dh, 1
mov dl, 0

compute:
mov dl, dh            ; store f(n - 1) into dl
add dl, al            ; add f(n - 2) to dl
mov al, dh            ; store f(n - 1) into al
mov dh, dl            ; store f(n - 2) into dh
dec cl
jnz compute

mov al, dl             ; these 3 instructions just convert dl into appropriate BCD
daa                    ; why? because after computing fibo(n) the result is in hex and we need to convert it to BCD
mov dl, al

show:
call showdl

mov ah, 4ch
int 21h

showdl proc

mov dh, dl

ror dl, 04h
and dl, 0fh

cmp dl, 0
je bottom

add dl, '0'

mov ah, 02h
int 21h

bottom:
mov dl, dh
and dl, 0fh
add dl, '0'

mov ah, 02h
int 21h

ret
showdl endp

end
